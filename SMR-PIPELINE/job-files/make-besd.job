#!/usr/bin/env bash
#$ -cwd

set -euo pipefail

source $1

PLINK=$CONFIG_PLINK
SMR=$CONFIG_SMR

LINE=$(cat "${CONFIG_JOBDIR}/make-besd.param" | sed "${SGE_TASK_ID}p;d")

echo ===
VARIANT=$(echo "$LINE" | awk '$0=$1')
GENETIC=$(echo "$LINE" | awk '$0=$2')
EQTL_FILE_GZ=$(echo "$LINE" | awk '$0=$3')
BESD_OUTPUT=$(echo "$LINE" | awk '$0=$4')
echo TaskID: $SGE_TASK_ID / "$VARIANT" '->' $BESD_OUTPUT
echo ===


BESD_OUTPUT=$(readlink -f $BESD_OUTPUT)
CONFIG_PROBEDB=$(readlink -f $CONFIG_PROBEDB)

export BESD_OUTPUT
export CONFIG_GWAS
export GENETIC
export CONFIG_PROBEDB

main() {

    BUILD_DIR="${TMPDIR:-/tmp}/build_${VARIANT}_${RANDOM}"
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR

    zcat $EQTL_FILE_GZ > $BUILD_DIR/eqtl
    if [ "$CONFIG_QTL_TYPE" = "nom" ]; then
        $SMR --eqtl-summary $BUILD_DIR/eqtl --qtltools-nominal-format --make-besd --out $BESD_OUTPUT
    else
        $SMR --eqtl-summary $BUILD_DIR/eqtl --qtltools-permu-format --make-besd --out $BESD_OUTPUT
    fi

    mv ${BESD_OUTPUT}.esi ${BESD_OUTPUT}.esi.bak
    mv ${BESD_OUTPUT}.epi ${BESD_OUTPUT}.epi.bak

    python <(cat << EOF
from __future__ import print_function
import os
import sqlite3

## UPDATE ESI FILE ##

esi_out = os.environ['BESD_OUTPUT'] + '.esi'
esi_in = os.environ['BESD_OUTPUT'] + '.esi.bak'
gwas_filename = os.environ['CONFIG_GWAS']

src = {}

with open(esi_in) as f:
    for line in f:
        parts = line.split()
        src[parts[1]] = parts

with open(gwas_filename) as f:
    for idx, line in enumerate(f):
        if idx == 0:
            continue
            # header: snp a1 a2 f b se p n
        parts = line.split()
        if parts[0] in src:
            src[parts[0]][4] = parts[1] # a1
            src[parts[0]][5] = parts[2] # a2
            src[parts[0]][6] = parts[3] # f

with open(esi_out, 'w') as f:
    for parts in src.values():
        print(*parts, sep='\t', file=f)

## UPDATE PROBE FILE ##

epi_out = os.environ['BESD_OUTPUT'] + '.epi'
epi_in = os.environ['BESD_OUTPUT'] + '.epi.bak'

db = os.environ['CONFIG_PROBEDB']

if os.path.exists(db):
    conn = sqlite3.connect(db)
    c = conn.cursor()
    with open(epi_out, 'w') as f:
        for line in open(epi_in):
            # chr probeid gen-distance(ignored) location geneid strand
            parts = line.split()
            c.execute('select SymbolReannotated from ExtraInfo where IlluminaID = ?', (parts[1],))
            parts[4], = c.fetchone()
            print(*parts, sep='\t', file=f)
    conn.close()
    print('epi done')
else:
    print('probe database not found, not annotating probes with gene names')
EOF
    )

    test -f ${BESD_OUTPUT}.epi || mv ${BESD_OUTPUT}.epi.bak ${BESD_OUTPUT}.epi

    cd ..
    # rm -r $BUILD_DIR ${BESD_OUTPUT}.esi.bak
}

main

