import sys
import gzip
import collections
import operator
import functools
import itertools
import sqlite3


#; drop table {0};
#drop index {0}_snp;

#drop index {0}_loc;
create_gwas_table = '''

create table {0} (
    snp text,
    ch text,
    bp integer,
    loc text,
    ref_allele text,
    other_allele text,
    ref_freq real,
    pvalue real,
    het_pvalue real,
    log_odds real,
    log_odds_se real,
    N_case integer,
    N_control integer,
    model text
    );

create unique index {0}_snp on {0} (snp);

create unique index {0}_loc on {0} (snp);
'''
# ; drop table {0};

create_gen_table  = '''

create table {0} (
    rsid text,
    ch text,
    bp integer,
    loc text,
    a text,
    b text,
    min text,
    maj text,
    aa real,
    ab real,
    bb real,
    aa_calls integer,
    ab_calls integer,
    bb_calls integer,
    maf real,
    hwe real,
    missing real,
    missing_calls real,
    Info real,
    CAF real
    );

create index {0}_rsid on {0} (rsid);

create index {0}_loc on {0} (loc);
'''

create_eqtl_table = '''
create {0} (
    phid text,
    phch text,
    phstart integer,
    phend integer,
    phstrand text,
    n integer,
    dist integer,
    varid text,
    varch text,
    varstart integer,
    varend integer,
    p real,
    slope real,
    istop integer
    );
'''


def get_lines(filename):
    if filename.endswith('.gz'):
        with gzip.open(filename) as f:
            for line in f: yield line.decode('latin1')
    elif filename == '-':
        for line in sys.stdin: yield line
    else:
        with open(filename) as f:
            for line in f: yield line

def read_rows(lines, header=None, header_check=lambda header: True):
    if isinstance(lines, str): lines = get_lines(lines)
    for line in lines:
        row = line.split()
        if header is None:
            header = row
            assert header_check(header)
        else:
            yield dict(zip(header, row))

def read_gwas(filename):
    # SNP         chr_pos_(b36) reference_allele other_allele ref_allele_frequency pvalue
    # het_pvalue  log_odds      log_odds_se      N_case       N_control            model
    for row in  read_rows(get_lines(filename),
            header_check=lambda h: len(h) == 12 and h[0] == 'SNP'):
        row['ch'], row['pos'] = row['chr_pos_(b36)'][3:].split(':', 1)
        yield row

def read_genetic(filename):
    # SNPID   RSID          Chr  BP       A_allele B_allele MinorAllele MajorAllele
    # AA      AB            BB   AA_calls AB_calls BB_calls MAF         HWE
    # missing missing_calls Info CAF
    return read_rows(get_lines(filename),
            header_check=lambda h: len(h) == 20 and h[0] == 'SNPID')

def read_qtlnom(filename):
    header = ['phid', 'phchr', 'phstart', 'phend', 'phstrand', 'n', 'dist',
              'varid', 'varchr', 'varstart', 'varend', 'p', 'slope', 'istop']
    return read_rows(get_lines(filename), header=header)

database, filetype, table, filename = sys.argv[1:]
conn = sqlite3.connect(database)
c = conn.cursor()
assert table.isalpha()
if filetype == 'gwas':
    for stat in create_gwas_table.format(table).split('\n\n'):
        c.execute(stat)
    for row in read_gwas(filename):
        c.execute('insert into {0} values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
                .format(table), (
                row['SNP'],
                row['ch'],
                int(row['pos']),
                row['ch'] + ':' + row['pos'],
                row['reference_allele'],
                row['other_allele'],
                float(row['ref_allele_frequency']),
                float(row['pvalue']),
                float(row['het_pvalue']),
                float(row['log_odds']),
                float(row['log_odds_se']),
                row['N_case'],
                row['N_control'],
                row['model']))
elif filetype == 'gen':
    for stat in create_gen_table.format(table).split('\n\n'):
        c.execute(stat)
    for idx, row in enumerate(read_genetic(filename), 1):
        # if idx % 100000 == 0:
        #     conn.commit()
        c.execute('''insert into {0} values
                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''.format(table), (
                row['RSID'],
                row['Chr'].lstrip('0'),
                int(row['BP']),
                row['Chr'].lstrip('0') + ':' + row['BP'],
                row['A_allele'],
                row['B_allele'],
                row['MinorAllele'],
                row['MajorAllele'],
                float(row['AA']),
                float(row['AB']),
                float(row['BB']),
                int(row['AA_calls']),
                int(row['AB_calls']),
                int(row['BB_calls']),
                float(row['MAF']),
                float(row['HWE']),
                float(row['missing']),
                float(row['missing_calls']),
                float(row['Info']),
                float(row['CAF'])))
conn.commit()
conn.close()

