#!/usr/bin/env python3

from __future__ import print_function

import sys
import shlex
import os
import time

try:
    from pathlib import Path
except ImportError:
    # python 2 backport
    shlex.quote = lambda x:x
    time.monotonic = time.time
    class Path:
        def __init__(self, path):
            self.path = path
        def iterdir(self):
            return (self / child for child in os.listdir(self.path))
        @property
        def name(self):
            return os.path.basename(self.path)
        def __div__(self, sub):
            return Path(os.path.join(self.path, sub))
        def read_bytes(self):
            with open(self.path, 'rb') as f:
                return f.read()
        def read_text(self):
            with open(self.path) as f:
                return f.read()
        def resolve(self):
            return Path(os.readlink(self.path))
        def __str__(self):
            return self.path
        def exists(self):
            return os.path.exists(self.path)
        def stat(self):
            return os.stat(self.path)
        def is_file(self):
            return os.path.isfile(self.path)

root = Path('/proc')
self = str(os.getpid())

cmdline_match = sys.argv[1:]
try:
    idx = cmdline_match.index('--')
    filename_match = cmdline_match[idx+1:]
    cmdline_match = cmdline_match[:idx]
except:
    filename_match = []

def human(size):
    suffix = 'b'
    if size > 1e9:
        size /= 1e9
        suffix = 'G'
    elif size > 1e6:
        size /= 1e6
        suffix = 'M'
    elif size > 1e3:
        size /= 1e3
        suffix = 'K'
    return '{size:.2f}{suffix}'.format(size=size, suffix=suffix)

def human_time(s):
    h, m, s = int(s) // (24*60), (int(s)%24) // 60, s % 60
    if h: return '{h}h:{m}m:{s:.2f}s'.format(h=h, m=m, s=s)
    if m: return '{m}m:{s:.2f}s'.format(h=h, m=m, s=s)
    return '{s:.2f}s'.format(h=h, m=m, s=s)


past_pos = {}

while True:
    os.system('clear')
    for proc in root.iterdir():
        if not proc.name.isdigit() or proc.name == self:
            continue
        try:
            cmdline = (proc / 'cmdline').read_bytes().split(b'\0')[:-1]
            cmdline = ' '.join(shlex.quote(path.decode('utf8')) for path in cmdline)
        except Exception as ex:
            print(ex)
            continue
        if any(arg not in cmdline for arg in cmdline_match):
            continue
        try:
            if filename_match:
                files = [str(link.resolve()) for link in (proc / 'fd').iterdir()]
                matches = False
                for term in filename_match:
                    if any(term in filename for filename in files):
                        matches = True
                        print('MATCH')
                        break
                if not matches:
                    continue
            print('[' + proc.name + ']')
            print(cmdline)
            for fdinfo in (proc / 'fdinfo').iterdir():
                pos = next(int(line.split()[-1])
                        for line in fdinfo.read_text().splitlines()
                        if line.startswith('pos'))
                fdnum = fdinfo.name
                fd = (proc / 'fd' / fdnum).resolve()
                if any(term not in str(fd) for term in filename_match):
                    continue
                if fd.exists() or filename_match:
                    print('  ', '[{fdnum}]'.format(fdnum=fdnum))
                    print('  ', fd)
                    print('  ', 'pos:', human(pos))
                if fd.exists():
                    cache_key = cmdline, proc.name, fdnum, str(fd)
                    size = fd.stat().st_size
                    if not fd.is_file() and size == 0:
                        continue
                    print('  ', '[{fdnum}]'.format(fdnum=fdnum))
                    print('  ', fd)
                    print('  ', 'pos:', human(pos))
                    print('  ', 'size:', human(size))
                    if size > 0:
                        print('  ', 'progress: {p:.2f}%'.format(p=pos / size * 100))
                    if cache_key not in past_pos:
                        past_pos[cache_key] = (pos, time.monotonic())
                    else:
                        old_pos, then = past_pos[cache_key]
                        now = time.monotonic()
                        rate = (pos - old_pos) / (now - then)
                        print('  ', 'rate:', human(rate)+'/s')
                        if size > 0 and rate > 0:
                            wait = (size - pos) / rate
                            print('  ', 'wait:', human_time(wait))
        except Exception as ex:
            s = str(ex)
            if 'denied' in s:
                pass
            else:
                print(ex)
    time.sleep(1)


